// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Qot_Common.proto

#ifndef PROTOBUF_Qot_5fCommon_2eproto__INCLUDED
#define PROTOBUF_Qot_5fCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_Qot_5fCommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSecurityImpl();
void InitDefaultsSecurity();
void InitDefaultsKLineImpl();
void InitDefaultsKLine();
void InitDefaultsBasicQotImpl();
void InitDefaultsBasicQot();
void InitDefaultsTimeShareImpl();
void InitDefaultsTimeShare();
void InitDefaultsSecurityStaticBasicImpl();
void InitDefaultsSecurityStaticBasic();
void InitDefaultsWarrantStaticExDataImpl();
void InitDefaultsWarrantStaticExData();
void InitDefaultsSecurityStaticInfoImpl();
void InitDefaultsSecurityStaticInfo();
void InitDefaultsBrokerImpl();
void InitDefaultsBroker();
void InitDefaultsTickerImpl();
void InitDefaultsTicker();
void InitDefaultsOrderBookImpl();
void InitDefaultsOrderBook();
void InitDefaultsSubInfoImpl();
void InitDefaultsSubInfo();
void InitDefaultsConnSubInfoImpl();
void InitDefaultsConnSubInfo();
inline void InitDefaults() {
  InitDefaultsSecurity();
  InitDefaultsKLine();
  InitDefaultsBasicQot();
  InitDefaultsTimeShare();
  InitDefaultsSecurityStaticBasic();
  InitDefaultsWarrantStaticExData();
  InitDefaultsSecurityStaticInfo();
  InitDefaultsBroker();
  InitDefaultsTicker();
  InitDefaultsOrderBook();
  InitDefaultsSubInfo();
  InitDefaultsConnSubInfo();
}
}  // namespace protobuf_Qot_5fCommon_2eproto
namespace Qot_Common {
class BasicQot;
class BasicQotDefaultTypeInternal;
extern BasicQotDefaultTypeInternal _BasicQot_default_instance_;
class Broker;
class BrokerDefaultTypeInternal;
extern BrokerDefaultTypeInternal _Broker_default_instance_;
class ConnSubInfo;
class ConnSubInfoDefaultTypeInternal;
extern ConnSubInfoDefaultTypeInternal _ConnSubInfo_default_instance_;
class KLine;
class KLineDefaultTypeInternal;
extern KLineDefaultTypeInternal _KLine_default_instance_;
class OrderBook;
class OrderBookDefaultTypeInternal;
extern OrderBookDefaultTypeInternal _OrderBook_default_instance_;
class Security;
class SecurityDefaultTypeInternal;
extern SecurityDefaultTypeInternal _Security_default_instance_;
class SecurityStaticBasic;
class SecurityStaticBasicDefaultTypeInternal;
extern SecurityStaticBasicDefaultTypeInternal _SecurityStaticBasic_default_instance_;
class SecurityStaticInfo;
class SecurityStaticInfoDefaultTypeInternal;
extern SecurityStaticInfoDefaultTypeInternal _SecurityStaticInfo_default_instance_;
class SubInfo;
class SubInfoDefaultTypeInternal;
extern SubInfoDefaultTypeInternal _SubInfo_default_instance_;
class Ticker;
class TickerDefaultTypeInternal;
extern TickerDefaultTypeInternal _Ticker_default_instance_;
class TimeShare;
class TimeShareDefaultTypeInternal;
extern TimeShareDefaultTypeInternal _TimeShare_default_instance_;
class WarrantStaticExData;
class WarrantStaticExDataDefaultTypeInternal;
extern WarrantStaticExDataDefaultTypeInternal _WarrantStaticExData_default_instance_;
}  // namespace Qot_Common
namespace Qot_Common {

enum QotMarket {
  QotMarket_Unknown = 0,
  QotMarket_HK_Security = 1,
  QotMarket_HK_Future = 2,
  QotMarket_US_Security = 11,
  QotMarket_US_Option = 12,
  QotMarket_CNSH_Security = 21,
  QotMarket_CNSZ_Security = 22
};
bool QotMarket_IsValid(int value);
const QotMarket QotMarket_MIN = QotMarket_Unknown;
const QotMarket QotMarket_MAX = QotMarket_CNSZ_Security;
const int QotMarket_ARRAYSIZE = QotMarket_MAX + 1;

const ::google::protobuf::EnumDescriptor* QotMarket_descriptor();
inline const ::std::string& QotMarket_Name(QotMarket value) {
  return ::google::protobuf::internal::NameOfEnum(
    QotMarket_descriptor(), value);
}
inline bool QotMarket_Parse(
    const ::std::string& name, QotMarket* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QotMarket>(
    QotMarket_descriptor(), name, value);
}
enum SecurityType {
  SecurityType_Unknown = 0,
  SecurityType_Bond = 1,
  SecurityType_Bwrt = 2,
  SecurityType_Eqty = 3,
  SecurityType_Trust = 4,
  SecurityType_Warrant = 5,
  SecurityType_Index = 6,
  SecurityType_Plate = 7,
  SecurityType_Drvt = 8,
  SecurityType_PlateSet = 9
};
bool SecurityType_IsValid(int value);
const SecurityType SecurityType_MIN = SecurityType_Unknown;
const SecurityType SecurityType_MAX = SecurityType_PlateSet;
const int SecurityType_ARRAYSIZE = SecurityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SecurityType_descriptor();
inline const ::std::string& SecurityType_Name(SecurityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SecurityType_descriptor(), value);
}
inline bool SecurityType_Parse(
    const ::std::string& name, SecurityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SecurityType>(
    SecurityType_descriptor(), name, value);
}
enum PlateSetType {
  PlateSetType_All = 0,
  PlateSetType_Industry = 1,
  PlateSetType_Region = 2,
  PlateSetType_Concept = 3
};
bool PlateSetType_IsValid(int value);
const PlateSetType PlateSetType_MIN = PlateSetType_All;
const PlateSetType PlateSetType_MAX = PlateSetType_Concept;
const int PlateSetType_ARRAYSIZE = PlateSetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlateSetType_descriptor();
inline const ::std::string& PlateSetType_Name(PlateSetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlateSetType_descriptor(), value);
}
inline bool PlateSetType_Parse(
    const ::std::string& name, PlateSetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlateSetType>(
    PlateSetType_descriptor(), name, value);
}
enum WarrantType {
  WarrantType_Unknown = 0,
  WarrantType_Buy = 1,
  WarrantType_Sell = 2,
  WarrantType_Bull = 3,
  WarrantType_Bear = 4
};
bool WarrantType_IsValid(int value);
const WarrantType WarrantType_MIN = WarrantType_Unknown;
const WarrantType WarrantType_MAX = WarrantType_Bear;
const int WarrantType_ARRAYSIZE = WarrantType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WarrantType_descriptor();
inline const ::std::string& WarrantType_Name(WarrantType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WarrantType_descriptor(), value);
}
inline bool WarrantType_Parse(
    const ::std::string& name, WarrantType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WarrantType>(
    WarrantType_descriptor(), name, value);
}
enum QotMarketState {
  QotMarketState_None = 0,
  QotMarketState_Auction = 1,
  QotMarketState_WaitingOpen = 2,
  QotMarketState_Morning = 3,
  QotMarketState_Rest = 4,
  QotMarketState_Afternoon = 5,
  QotMarketState_Closed = 6,
  QotMarketState_PreMarketBegin = 8,
  QotMarketState_PreMarketEnd = 9,
  QotMarketState_AfterHoursBegin = 10,
  QotMarketState_AfterHoursEnd = 11,
  QotMarketState_NightOpen = 13,
  QotMarketState_NightEnd = 14,
  QotMarketState_FutureDayOpen = 15,
  QotMarketState_FutureDayBreak = 16,
  QotMarketState_FutureDayClose = 17,
  QotMarketState_FutureDayWaitForOpen = 18,
  QotMarketState_HkCas = 19
};
bool QotMarketState_IsValid(int value);
const QotMarketState QotMarketState_MIN = QotMarketState_None;
const QotMarketState QotMarketState_MAX = QotMarketState_HkCas;
const int QotMarketState_ARRAYSIZE = QotMarketState_MAX + 1;

const ::google::protobuf::EnumDescriptor* QotMarketState_descriptor();
inline const ::std::string& QotMarketState_Name(QotMarketState value) {
  return ::google::protobuf::internal::NameOfEnum(
    QotMarketState_descriptor(), value);
}
inline bool QotMarketState_Parse(
    const ::std::string& name, QotMarketState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QotMarketState>(
    QotMarketState_descriptor(), name, value);
}
enum RehabType {
  RehabType_None = 0,
  RehabType_Forward = 1,
  RehabType_Backward = 2
};
bool RehabType_IsValid(int value);
const RehabType RehabType_MIN = RehabType_None;
const RehabType RehabType_MAX = RehabType_Backward;
const int RehabType_ARRAYSIZE = RehabType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RehabType_descriptor();
inline const ::std::string& RehabType_Name(RehabType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RehabType_descriptor(), value);
}
inline bool RehabType_Parse(
    const ::std::string& name, RehabType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RehabType>(
    RehabType_descriptor(), name, value);
}
enum KLType {
  KLType_Unknown = 0,
  KLType_1Min = 1,
  KLType_Day = 2,
  KLType_Week = 3,
  KLType_Month = 4,
  KLType_Year = 5,
  KLType_5Min = 6,
  KLType_15Min = 7,
  KLType_30Min = 8,
  KLType_60Min = 9,
  KLType_3Min = 10,
  KLType_Quarter = 11
};
bool KLType_IsValid(int value);
const KLType KLType_MIN = KLType_Unknown;
const KLType KLType_MAX = KLType_Quarter;
const int KLType_ARRAYSIZE = KLType_MAX + 1;

const ::google::protobuf::EnumDescriptor* KLType_descriptor();
inline const ::std::string& KLType_Name(KLType value) {
  return ::google::protobuf::internal::NameOfEnum(
    KLType_descriptor(), value);
}
inline bool KLType_Parse(
    const ::std::string& name, KLType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KLType>(
    KLType_descriptor(), name, value);
}
enum KLFields {
  KLFields_None = 0,
  KLFields_High = 1,
  KLFields_Open = 2,
  KLFields_Low = 4,
  KLFields_Close = 8,
  KLFields_LastClose = 16,
  KLFields_Volume = 32,
  KLFields_Turnover = 64,
  KLFields_TurnoverRate = 128,
  KLFields_PE = 256,
  KLFields_ChangeRate = 512
};
bool KLFields_IsValid(int value);
const KLFields KLFields_MIN = KLFields_None;
const KLFields KLFields_MAX = KLFields_ChangeRate;
const int KLFields_ARRAYSIZE = KLFields_MAX + 1;

const ::google::protobuf::EnumDescriptor* KLFields_descriptor();
inline const ::std::string& KLFields_Name(KLFields value) {
  return ::google::protobuf::internal::NameOfEnum(
    KLFields_descriptor(), value);
}
inline bool KLFields_Parse(
    const ::std::string& name, KLFields* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KLFields>(
    KLFields_descriptor(), name, value);
}
enum SubType {
  SubType_None = 0,
  SubType_Basic = 1,
  SubType_OrderBook = 2,
  SubType_Ticker = 4,
  SubType_RT = 5,
  SubType_KL_Day = 6,
  SubType_KL_5Min = 7,
  SubType_KL_15Min = 8,
  SubType_KL_30Min = 9,
  SubType_KL_60Min = 10,
  SubType_KL_1Min = 11,
  SubType_KL_Week = 12,
  SubType_KL_Month = 13,
  SubType_Broker = 14,
  SubType_KL_Qurater = 15,
  SubType_KL_Year = 16,
  SubType_KL_3Min = 17
};
bool SubType_IsValid(int value);
const SubType SubType_MIN = SubType_None;
const SubType SubType_MAX = SubType_KL_3Min;
const int SubType_ARRAYSIZE = SubType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SubType_descriptor();
inline const ::std::string& SubType_Name(SubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SubType_descriptor(), value);
}
inline bool SubType_Parse(
    const ::std::string& name, SubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubType>(
    SubType_descriptor(), name, value);
}
enum TickerDirection {
  TickerDirection_Unknown = 0,
  TickerDirection_Bid = 1,
  TickerDirection_Ask = 2,
  TickerDirection_Neutral = 3
};
bool TickerDirection_IsValid(int value);
const TickerDirection TickerDirection_MIN = TickerDirection_Unknown;
const TickerDirection TickerDirection_MAX = TickerDirection_Neutral;
const int TickerDirection_ARRAYSIZE = TickerDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* TickerDirection_descriptor();
inline const ::std::string& TickerDirection_Name(TickerDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    TickerDirection_descriptor(), value);
}
inline bool TickerDirection_Parse(
    const ::std::string& name, TickerDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TickerDirection>(
    TickerDirection_descriptor(), name, value);
}
enum TickerType {
  TickerType_Unknown = 0,
  TickerType_Automatch = 1,
  TickerType_Late = 2,
  TickerType_NoneAutomatch = 3,
  TickerType_InterAutomatch = 4,
  TickerType_InterNoneAutomatch = 5,
  TickerType_OddLot = 6,
  TickerType_Auction = 7,
  TickerType_Bulk = 8,
  TickerType_Crash = 9,
  TickerType_CrossMarket = 10,
  TickerType_BulkSold = 11,
  TickerType_FreeOnBoard = 12,
  TickerType_Rule127Or155 = 13,
  TickerType_Delay = 14,
  TickerType_MarketCenterClosePrice = 15,
  TickerType_NextDay = 16,
  TickerType_MarketCenterOpening = 17,
  TickerType_PriorReferencePrice = 18,
  TickerType_MarketCenterOpenPrice = 19,
  TickerType_Seller = 20,
  TickerType_T = 21,
  TickerType_ExtendedTradingHours = 22,
  TickerType_Contingent = 23,
  TickerType_AveragePrice = 24,
  TickerType_OTCSold = 25,
  TickerType_OddLotCrossMarket = 26,
  TickerType_DerivativelyPriced = 27,
  TickerType_ReOpeningPriced = 28,
  TickerType_ClosingPriced = 29,
  TickerType_ComprehensiveDelayPrice = 30
};
bool TickerType_IsValid(int value);
const TickerType TickerType_MIN = TickerType_Unknown;
const TickerType TickerType_MAX = TickerType_ComprehensiveDelayPrice;
const int TickerType_ARRAYSIZE = TickerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TickerType_descriptor();
inline const ::std::string& TickerType_Name(TickerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TickerType_descriptor(), value);
}
inline bool TickerType_Parse(
    const ::std::string& name, TickerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TickerType>(
    TickerType_descriptor(), name, value);
}
enum DarkStatus {
  DarkStatus_None = 0,
  DarkStatus_Trading = 1,
  DarkStatus_End = 2
};
bool DarkStatus_IsValid(int value);
const DarkStatus DarkStatus_MIN = DarkStatus_None;
const DarkStatus DarkStatus_MAX = DarkStatus_End;
const int DarkStatus_ARRAYSIZE = DarkStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DarkStatus_descriptor();
inline const ::std::string& DarkStatus_Name(DarkStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DarkStatus_descriptor(), value);
}
inline bool DarkStatus_Parse(
    const ::std::string& name, DarkStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DarkStatus>(
    DarkStatus_descriptor(), name, value);
}
// ===================================================================

class Security : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.Security) */ {
 public:
  Security();
  virtual ~Security();

  Security(const Security& from);

  inline Security& operator=(const Security& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Security(Security&& from) noexcept
    : Security() {
    *this = ::std::move(from);
  }

  inline Security& operator=(Security&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Security& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Security* internal_default_instance() {
    return reinterpret_cast<const Security*>(
               &_Security_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Security* other);
  friend void swap(Security& a, Security& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Security* New() const PROTOBUF_FINAL { return New(NULL); }

  Security* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Security& from);
  void MergeFrom(const Security& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Security* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // required int32 market = 1;
  bool has_market() const;
  void clear_market();
  static const int kMarketFieldNumber = 1;
  ::google::protobuf::int32 market() const;
  void set_market(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.Security)
 private:
  void set_has_market();
  void clear_has_market();
  void set_has_code();
  void clear_has_code();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::int32 market_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsSecurityImpl();
};
// -------------------------------------------------------------------

class KLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.KLine) */ {
 public:
  KLine();
  virtual ~KLine();

  KLine(const KLine& from);

  inline KLine& operator=(const KLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KLine(KLine&& from) noexcept
    : KLine() {
    *this = ::std::move(from);
  }

  inline KLine& operator=(KLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KLine* internal_default_instance() {
    return reinterpret_cast<const KLine*>(
               &_KLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(KLine* other);
  friend void swap(KLine& a, KLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KLine* New() const PROTOBUF_FINAL { return New(NULL); }

  KLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KLine& from);
  void MergeFrom(const KLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // optional double highPrice = 3;
  bool has_highprice() const;
  void clear_highprice();
  static const int kHighPriceFieldNumber = 3;
  double highprice() const;
  void set_highprice(double value);

  // optional double openPrice = 4;
  bool has_openprice() const;
  void clear_openprice();
  static const int kOpenPriceFieldNumber = 4;
  double openprice() const;
  void set_openprice(double value);

  // optional double lowPrice = 5;
  bool has_lowprice() const;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 5;
  double lowprice() const;
  void set_lowprice(double value);

  // optional double closePrice = 6;
  bool has_closeprice() const;
  void clear_closeprice();
  static const int kClosePriceFieldNumber = 6;
  double closeprice() const;
  void set_closeprice(double value);

  // optional double lastClosePrice = 7;
  bool has_lastcloseprice() const;
  void clear_lastcloseprice();
  static const int kLastClosePriceFieldNumber = 7;
  double lastcloseprice() const;
  void set_lastcloseprice(double value);

  // optional int64 volume = 8;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional double turnover = 9;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 9;
  double turnover() const;
  void set_turnover(double value);

  // optional double turnoverRate = 10;
  bool has_turnoverrate() const;
  void clear_turnoverrate();
  static const int kTurnoverRateFieldNumber = 10;
  double turnoverrate() const;
  void set_turnoverrate(double value);

  // optional double pe = 11;
  bool has_pe() const;
  void clear_pe();
  static const int kPeFieldNumber = 11;
  double pe() const;
  void set_pe(double value);

  // optional double changeRate = 12;
  bool has_changerate() const;
  void clear_changerate();
  static const int kChangeRateFieldNumber = 12;
  double changerate() const;
  void set_changerate(double value);

  // required bool isBlank = 2;
  bool has_isblank() const;
  void clear_isblank();
  static const int kIsBlankFieldNumber = 2;
  bool isblank() const;
  void set_isblank(bool value);

  // @@protoc_insertion_point(class_scope:Qot_Common.KLine)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_isblank();
  void clear_has_isblank();
  void set_has_highprice();
  void clear_has_highprice();
  void set_has_openprice();
  void clear_has_openprice();
  void set_has_lowprice();
  void clear_has_lowprice();
  void set_has_closeprice();
  void clear_has_closeprice();
  void set_has_lastcloseprice();
  void clear_has_lastcloseprice();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_turnoverrate();
  void clear_has_turnoverrate();
  void set_has_pe();
  void clear_has_pe();
  void set_has_changerate();
  void clear_has_changerate();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  double highprice_;
  double openprice_;
  double lowprice_;
  double closeprice_;
  double lastcloseprice_;
  ::google::protobuf::int64 volume_;
  double turnover_;
  double turnoverrate_;
  double pe_;
  double changerate_;
  bool isblank_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsKLineImpl();
};
// -------------------------------------------------------------------

class BasicQot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.BasicQot) */ {
 public:
  BasicQot();
  virtual ~BasicQot();

  BasicQot(const BasicQot& from);

  inline BasicQot& operator=(const BasicQot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicQot(BasicQot&& from) noexcept
    : BasicQot() {
    *this = ::std::move(from);
  }

  inline BasicQot& operator=(BasicQot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicQot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicQot* internal_default_instance() {
    return reinterpret_cast<const BasicQot*>(
               &_BasicQot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BasicQot* other);
  friend void swap(BasicQot& a, BasicQot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicQot* New() const PROTOBUF_FINAL { return New(NULL); }

  BasicQot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BasicQot& from);
  void MergeFrom(const BasicQot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BasicQot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string listTime = 3;
  bool has_listtime() const;
  void clear_listtime();
  static const int kListTimeFieldNumber = 3;
  const ::std::string& listtime() const;
  void set_listtime(const ::std::string& value);
  #if LANG_CXX11
  void set_listtime(::std::string&& value);
  #endif
  void set_listtime(const char* value);
  void set_listtime(const char* value, size_t size);
  ::std::string* mutable_listtime();
  ::std::string* release_listtime();
  void set_allocated_listtime(::std::string* listtime);

  // required string updateTime = 5;
  bool has_updatetime() const;
  void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 5;
  const ::std::string& updatetime() const;
  void set_updatetime(const ::std::string& value);
  #if LANG_CXX11
  void set_updatetime(::std::string&& value);
  #endif
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  ::std::string* mutable_updatetime();
  ::std::string* release_updatetime();
  void set_allocated_updatetime(::std::string* updatetime);

  // required .Qot_Common.Security security = 1;
  bool has_security() const;
  void clear_security();
  static const int kSecurityFieldNumber = 1;
  const ::Qot_Common::Security& security() const;
  ::Qot_Common::Security* release_security();
  ::Qot_Common::Security* mutable_security();
  void set_allocated_security(::Qot_Common::Security* security);

  // required double priceSpread = 4;
  bool has_pricespread() const;
  void clear_pricespread();
  static const int kPriceSpreadFieldNumber = 4;
  double pricespread() const;
  void set_pricespread(double value);

  // required double highPrice = 6;
  bool has_highprice() const;
  void clear_highprice();
  static const int kHighPriceFieldNumber = 6;
  double highprice() const;
  void set_highprice(double value);

  // required double openPrice = 7;
  bool has_openprice() const;
  void clear_openprice();
  static const int kOpenPriceFieldNumber = 7;
  double openprice() const;
  void set_openprice(double value);

  // required double lowPrice = 8;
  bool has_lowprice() const;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 8;
  double lowprice() const;
  void set_lowprice(double value);

  // required bool isSuspended = 2;
  bool has_issuspended() const;
  void clear_issuspended();
  static const int kIsSuspendedFieldNumber = 2;
  bool issuspended() const;
  void set_issuspended(bool value);

  // optional int32 darkStatus = 15;
  bool has_darkstatus() const;
  void clear_darkstatus();
  static const int kDarkStatusFieldNumber = 15;
  ::google::protobuf::int32 darkstatus() const;
  void set_darkstatus(::google::protobuf::int32 value);

  // required double curPrice = 9;
  bool has_curprice() const;
  void clear_curprice();
  static const int kCurPriceFieldNumber = 9;
  double curprice() const;
  void set_curprice(double value);

  // required double lastClosePrice = 10;
  bool has_lastcloseprice() const;
  void clear_lastcloseprice();
  static const int kLastClosePriceFieldNumber = 10;
  double lastcloseprice() const;
  void set_lastcloseprice(double value);

  // required int64 volume = 11;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 11;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // required double turnover = 12;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 12;
  double turnover() const;
  void set_turnover(double value);

  // required double turnoverRate = 13;
  bool has_turnoverrate() const;
  void clear_turnoverrate();
  static const int kTurnoverRateFieldNumber = 13;
  double turnoverrate() const;
  void set_turnoverrate(double value);

  // required double amplitude = 14;
  bool has_amplitude() const;
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 14;
  double amplitude() const;
  void set_amplitude(double value);

  // @@protoc_insertion_point(class_scope:Qot_Common.BasicQot)
 private:
  void set_has_security();
  void clear_has_security();
  void set_has_issuspended();
  void clear_has_issuspended();
  void set_has_listtime();
  void clear_has_listtime();
  void set_has_pricespread();
  void clear_has_pricespread();
  void set_has_updatetime();
  void clear_has_updatetime();
  void set_has_highprice();
  void clear_has_highprice();
  void set_has_openprice();
  void clear_has_openprice();
  void set_has_lowprice();
  void clear_has_lowprice();
  void set_has_curprice();
  void clear_has_curprice();
  void set_has_lastcloseprice();
  void clear_has_lastcloseprice();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_turnoverrate();
  void clear_has_turnoverrate();
  void set_has_amplitude();
  void clear_has_amplitude();
  void set_has_darkstatus();
  void clear_has_darkstatus();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr listtime_;
  ::google::protobuf::internal::ArenaStringPtr updatetime_;
  ::Qot_Common::Security* security_;
  double pricespread_;
  double highprice_;
  double openprice_;
  double lowprice_;
  bool issuspended_;
  ::google::protobuf::int32 darkstatus_;
  double curprice_;
  double lastcloseprice_;
  ::google::protobuf::int64 volume_;
  double turnover_;
  double turnoverrate_;
  double amplitude_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsBasicQotImpl();
};
// -------------------------------------------------------------------

class TimeShare : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.TimeShare) */ {
 public:
  TimeShare();
  virtual ~TimeShare();

  TimeShare(const TimeShare& from);

  inline TimeShare& operator=(const TimeShare& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeShare(TimeShare&& from) noexcept
    : TimeShare() {
    *this = ::std::move(from);
  }

  inline TimeShare& operator=(TimeShare&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeShare& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeShare* internal_default_instance() {
    return reinterpret_cast<const TimeShare*>(
               &_TimeShare_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TimeShare* other);
  friend void swap(TimeShare& a, TimeShare& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeShare* New() const PROTOBUF_FINAL { return New(NULL); }

  TimeShare* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TimeShare& from);
  void MergeFrom(const TimeShare& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TimeShare* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // required int32 minute = 2;
  bool has_minute() const;
  void clear_minute();
  static const int kMinuteFieldNumber = 2;
  ::google::protobuf::int32 minute() const;
  void set_minute(::google::protobuf::int32 value);

  // required bool isBlank = 3;
  bool has_isblank() const;
  void clear_isblank();
  static const int kIsBlankFieldNumber = 3;
  bool isblank() const;
  void set_isblank(bool value);

  // optional double price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  double price() const;
  void set_price(double value);

  // optional double lastClosePrice = 5;
  bool has_lastcloseprice() const;
  void clear_lastcloseprice();
  static const int kLastClosePriceFieldNumber = 5;
  double lastcloseprice() const;
  void set_lastcloseprice(double value);

  // optional double avgPrice = 6;
  bool has_avgprice() const;
  void clear_avgprice();
  static const int kAvgPriceFieldNumber = 6;
  double avgprice() const;
  void set_avgprice(double value);

  // optional int64 volume = 7;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 7;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // optional double turnover = 8;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 8;
  double turnover() const;
  void set_turnover(double value);

  // @@protoc_insertion_point(class_scope:Qot_Common.TimeShare)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_minute();
  void clear_has_minute();
  void set_has_isblank();
  void clear_has_isblank();
  void set_has_price();
  void clear_has_price();
  void set_has_lastcloseprice();
  void clear_has_lastcloseprice();
  void set_has_avgprice();
  void clear_has_avgprice();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::int32 minute_;
  bool isblank_;
  double price_;
  double lastcloseprice_;
  double avgprice_;
  ::google::protobuf::int64 volume_;
  double turnover_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsTimeShareImpl();
};
// -------------------------------------------------------------------

class SecurityStaticBasic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.SecurityStaticBasic) */ {
 public:
  SecurityStaticBasic();
  virtual ~SecurityStaticBasic();

  SecurityStaticBasic(const SecurityStaticBasic& from);

  inline SecurityStaticBasic& operator=(const SecurityStaticBasic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityStaticBasic(SecurityStaticBasic&& from) noexcept
    : SecurityStaticBasic() {
    *this = ::std::move(from);
  }

  inline SecurityStaticBasic& operator=(SecurityStaticBasic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityStaticBasic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityStaticBasic* internal_default_instance() {
    return reinterpret_cast<const SecurityStaticBasic*>(
               &_SecurityStaticBasic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SecurityStaticBasic* other);
  friend void swap(SecurityStaticBasic& a, SecurityStaticBasic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityStaticBasic* New() const PROTOBUF_FINAL { return New(NULL); }

  SecurityStaticBasic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SecurityStaticBasic& from);
  void MergeFrom(const SecurityStaticBasic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SecurityStaticBasic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string listTime = 6;
  bool has_listtime() const;
  void clear_listtime();
  static const int kListTimeFieldNumber = 6;
  const ::std::string& listtime() const;
  void set_listtime(const ::std::string& value);
  #if LANG_CXX11
  void set_listtime(::std::string&& value);
  #endif
  void set_listtime(const char* value);
  void set_listtime(const char* value, size_t size);
  ::std::string* mutable_listtime();
  ::std::string* release_listtime();
  void set_allocated_listtime(::std::string* listtime);

  // required .Qot_Common.Security security = 1;
  bool has_security() const;
  void clear_security();
  static const int kSecurityFieldNumber = 1;
  const ::Qot_Common::Security& security() const;
  ::Qot_Common::Security* release_security();
  ::Qot_Common::Security* mutable_security();
  void set_allocated_security(::Qot_Common::Security* security);

  // required int64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int32 lotSize = 3;
  bool has_lotsize() const;
  void clear_lotsize();
  static const int kLotSizeFieldNumber = 3;
  ::google::protobuf::int32 lotsize() const;
  void set_lotsize(::google::protobuf::int32 value);

  // required int32 secType = 4;
  bool has_sectype() const;
  void clear_sectype();
  static const int kSecTypeFieldNumber = 4;
  ::google::protobuf::int32 sectype() const;
  void set_sectype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.SecurityStaticBasic)
 private:
  void set_has_security();
  void clear_has_security();
  void set_has_id();
  void clear_has_id();
  void set_has_lotsize();
  void clear_has_lotsize();
  void set_has_sectype();
  void clear_has_sectype();
  void set_has_name();
  void clear_has_name();
  void set_has_listtime();
  void clear_has_listtime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr listtime_;
  ::Qot_Common::Security* security_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 lotsize_;
  ::google::protobuf::int32 sectype_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsSecurityStaticBasicImpl();
};
// -------------------------------------------------------------------

class WarrantStaticExData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.WarrantStaticExData) */ {
 public:
  WarrantStaticExData();
  virtual ~WarrantStaticExData();

  WarrantStaticExData(const WarrantStaticExData& from);

  inline WarrantStaticExData& operator=(const WarrantStaticExData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WarrantStaticExData(WarrantStaticExData&& from) noexcept
    : WarrantStaticExData() {
    *this = ::std::move(from);
  }

  inline WarrantStaticExData& operator=(WarrantStaticExData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WarrantStaticExData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WarrantStaticExData* internal_default_instance() {
    return reinterpret_cast<const WarrantStaticExData*>(
               &_WarrantStaticExData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(WarrantStaticExData* other);
  friend void swap(WarrantStaticExData& a, WarrantStaticExData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WarrantStaticExData* New() const PROTOBUF_FINAL { return New(NULL); }

  WarrantStaticExData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WarrantStaticExData& from);
  void MergeFrom(const WarrantStaticExData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WarrantStaticExData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Qot_Common.Security owner = 2;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 2;
  const ::Qot_Common::Security& owner() const;
  ::Qot_Common::Security* release_owner();
  ::Qot_Common::Security* mutable_owner();
  void set_allocated_owner(::Qot_Common::Security* owner);

  // required int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.WarrantStaticExData)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_owner();
  void clear_has_owner();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Qot_Common::Security* owner_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsWarrantStaticExDataImpl();
};
// -------------------------------------------------------------------

class SecurityStaticInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.SecurityStaticInfo) */ {
 public:
  SecurityStaticInfo();
  virtual ~SecurityStaticInfo();

  SecurityStaticInfo(const SecurityStaticInfo& from);

  inline SecurityStaticInfo& operator=(const SecurityStaticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityStaticInfo(SecurityStaticInfo&& from) noexcept
    : SecurityStaticInfo() {
    *this = ::std::move(from);
  }

  inline SecurityStaticInfo& operator=(SecurityStaticInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SecurityStaticInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityStaticInfo* internal_default_instance() {
    return reinterpret_cast<const SecurityStaticInfo*>(
               &_SecurityStaticInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SecurityStaticInfo* other);
  friend void swap(SecurityStaticInfo& a, SecurityStaticInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityStaticInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SecurityStaticInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SecurityStaticInfo& from);
  void MergeFrom(const SecurityStaticInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SecurityStaticInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Qot_Common.SecurityStaticBasic basic = 1;
  bool has_basic() const;
  void clear_basic();
  static const int kBasicFieldNumber = 1;
  const ::Qot_Common::SecurityStaticBasic& basic() const;
  ::Qot_Common::SecurityStaticBasic* release_basic();
  ::Qot_Common::SecurityStaticBasic* mutable_basic();
  void set_allocated_basic(::Qot_Common::SecurityStaticBasic* basic);

  // optional .Qot_Common.WarrantStaticExData warrantExData = 2;
  bool has_warrantexdata() const;
  void clear_warrantexdata();
  static const int kWarrantExDataFieldNumber = 2;
  const ::Qot_Common::WarrantStaticExData& warrantexdata() const;
  ::Qot_Common::WarrantStaticExData* release_warrantexdata();
  ::Qot_Common::WarrantStaticExData* mutable_warrantexdata();
  void set_allocated_warrantexdata(::Qot_Common::WarrantStaticExData* warrantexdata);

  // @@protoc_insertion_point(class_scope:Qot_Common.SecurityStaticInfo)
 private:
  void set_has_basic();
  void clear_has_basic();
  void set_has_warrantexdata();
  void clear_has_warrantexdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::Qot_Common::SecurityStaticBasic* basic_;
  ::Qot_Common::WarrantStaticExData* warrantexdata_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsSecurityStaticInfoImpl();
};
// -------------------------------------------------------------------

class Broker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.Broker) */ {
 public:
  Broker();
  virtual ~Broker();

  Broker(const Broker& from);

  inline Broker& operator=(const Broker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Broker(Broker&& from) noexcept
    : Broker() {
    *this = ::std::move(from);
  }

  inline Broker& operator=(Broker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Broker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Broker* internal_default_instance() {
    return reinterpret_cast<const Broker*>(
               &_Broker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Broker* other);
  friend void swap(Broker& a, Broker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Broker* New() const PROTOBUF_FINAL { return New(NULL); }

  Broker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Broker& from);
  void MergeFrom(const Broker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Broker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int32 pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  ::google::protobuf::int32 pos() const;
  void set_pos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.Broker)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_name();
  void clear_has_name();
  void set_has_pos();
  void clear_has_pos();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 pos_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsBrokerImpl();
};
// -------------------------------------------------------------------

class Ticker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.Ticker) */ {
 public:
  Ticker();
  virtual ~Ticker();

  Ticker(const Ticker& from);

  inline Ticker& operator=(const Ticker& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ticker(Ticker&& from) noexcept
    : Ticker() {
    *this = ::std::move(from);
  }

  inline Ticker& operator=(Ticker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ticker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ticker* internal_default_instance() {
    return reinterpret_cast<const Ticker*>(
               &_Ticker_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Ticker* other);
  friend void swap(Ticker& a, Ticker& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ticker* New() const PROTOBUF_FINAL { return New(NULL); }

  Ticker* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Ticker& from);
  void MergeFrom(const Ticker& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Ticker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // required int64 sequence = 2;
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::int64 sequence() const;
  void set_sequence(::google::protobuf::int64 value);

  // required double price = 4;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  double price() const;
  void set_price(double value);

  // required int64 volume = 5;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 5;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // required int32 dir = 3;
  bool has_dir() const;
  void clear_dir();
  static const int kDirFieldNumber = 3;
  ::google::protobuf::int32 dir() const;
  void set_dir(::google::protobuf::int32 value);

  // optional int32 type = 8;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required double turnover = 6;
  bool has_turnover() const;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 6;
  double turnover() const;
  void set_turnover(double value);

  // optional double recvTime = 7;
  bool has_recvtime() const;
  void clear_recvtime();
  static const int kRecvTimeFieldNumber = 7;
  double recvtime() const;
  void set_recvtime(double value);

  // optional int32 typeSign = 9;
  bool has_typesign() const;
  void clear_typesign();
  static const int kTypeSignFieldNumber = 9;
  ::google::protobuf::int32 typesign() const;
  void set_typesign(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.Ticker)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_sequence();
  void clear_has_sequence();
  void set_has_dir();
  void clear_has_dir();
  void set_has_price();
  void clear_has_price();
  void set_has_volume();
  void clear_has_volume();
  void set_has_turnover();
  void clear_has_turnover();
  void set_has_recvtime();
  void clear_has_recvtime();
  void set_has_type();
  void clear_has_type();
  void set_has_typesign();
  void clear_has_typesign();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::int64 sequence_;
  double price_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int32 dir_;
  ::google::protobuf::int32 type_;
  double turnover_;
  double recvtime_;
  ::google::protobuf::int32 typesign_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsTickerImpl();
};
// -------------------------------------------------------------------

class OrderBook : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.OrderBook) */ {
 public:
  OrderBook();
  virtual ~OrderBook();

  OrderBook(const OrderBook& from);

  inline OrderBook& operator=(const OrderBook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrderBook(OrderBook&& from) noexcept
    : OrderBook() {
    *this = ::std::move(from);
  }

  inline OrderBook& operator=(OrderBook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderBook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderBook* internal_default_instance() {
    return reinterpret_cast<const OrderBook*>(
               &_OrderBook_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(OrderBook* other);
  friend void swap(OrderBook& a, OrderBook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrderBook* New() const PROTOBUF_FINAL { return New(NULL); }

  OrderBook* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OrderBook& from);
  void MergeFrom(const OrderBook& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OrderBook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double price = 1;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 1;
  double price() const;
  void set_price(double value);

  // required int64 volume = 2;
  bool has_volume() const;
  void clear_volume();
  static const int kVolumeFieldNumber = 2;
  ::google::protobuf::int64 volume() const;
  void set_volume(::google::protobuf::int64 value);

  // required int32 orederCount = 3;
  bool has_oredercount() const;
  void clear_oredercount();
  static const int kOrederCountFieldNumber = 3;
  ::google::protobuf::int32 oredercount() const;
  void set_oredercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.OrderBook)
 private:
  void set_has_price();
  void clear_has_price();
  void set_has_volume();
  void clear_has_volume();
  void set_has_oredercount();
  void clear_has_oredercount();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double price_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int32 oredercount_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsOrderBookImpl();
};
// -------------------------------------------------------------------

class SubInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.SubInfo) */ {
 public:
  SubInfo();
  virtual ~SubInfo();

  SubInfo(const SubInfo& from);

  inline SubInfo& operator=(const SubInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubInfo(SubInfo&& from) noexcept
    : SubInfo() {
    *this = ::std::move(from);
  }

  inline SubInfo& operator=(SubInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubInfo* internal_default_instance() {
    return reinterpret_cast<const SubInfo*>(
               &_SubInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(SubInfo* other);
  friend void swap(SubInfo& a, SubInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SubInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubInfo& from);
  void MergeFrom(const SubInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_Common.Security securityList = 2;
  int securitylist_size() const;
  void clear_securitylist();
  static const int kSecurityListFieldNumber = 2;
  const ::Qot_Common::Security& securitylist(int index) const;
  ::Qot_Common::Security* mutable_securitylist(int index);
  ::Qot_Common::Security* add_securitylist();
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >*
      mutable_securitylist();
  const ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >&
      securitylist() const;

  // required int32 subType = 1;
  bool has_subtype() const;
  void clear_subtype();
  static const int kSubTypeFieldNumber = 1;
  ::google::protobuf::int32 subtype() const;
  void set_subtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Qot_Common.SubInfo)
 private:
  void set_has_subtype();
  void clear_has_subtype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security > securitylist_;
  ::google::protobuf::int32 subtype_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsSubInfoImpl();
};
// -------------------------------------------------------------------

class ConnSubInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Qot_Common.ConnSubInfo) */ {
 public:
  ConnSubInfo();
  virtual ~ConnSubInfo();

  ConnSubInfo(const ConnSubInfo& from);

  inline ConnSubInfo& operator=(const ConnSubInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnSubInfo(ConnSubInfo&& from) noexcept
    : ConnSubInfo() {
    *this = ::std::move(from);
  }

  inline ConnSubInfo& operator=(ConnSubInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnSubInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnSubInfo* internal_default_instance() {
    return reinterpret_cast<const ConnSubInfo*>(
               &_ConnSubInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ConnSubInfo* other);
  friend void swap(ConnSubInfo& a, ConnSubInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnSubInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnSubInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnSubInfo& from);
  void MergeFrom(const ConnSubInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnSubInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Qot_Common.SubInfo subInfoList = 1;
  int subinfolist_size() const;
  void clear_subinfolist();
  static const int kSubInfoListFieldNumber = 1;
  const ::Qot_Common::SubInfo& subinfolist(int index) const;
  ::Qot_Common::SubInfo* mutable_subinfolist(int index);
  ::Qot_Common::SubInfo* add_subinfolist();
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo >*
      mutable_subinfolist();
  const ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo >&
      subinfolist() const;

  // required int32 usedQuota = 2;
  bool has_usedquota() const;
  void clear_usedquota();
  static const int kUsedQuotaFieldNumber = 2;
  ::google::protobuf::int32 usedquota() const;
  void set_usedquota(::google::protobuf::int32 value);

  // required bool isOwnConnData = 3;
  bool has_isownconndata() const;
  void clear_isownconndata();
  static const int kIsOwnConnDataFieldNumber = 3;
  bool isownconndata() const;
  void set_isownconndata(bool value);

  // @@protoc_insertion_point(class_scope:Qot_Common.ConnSubInfo)
 private:
  void set_has_usedquota();
  void clear_has_usedquota();
  void set_has_isownconndata();
  void clear_has_isownconndata();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo > subinfolist_;
  ::google::protobuf::int32 usedquota_;
  bool isownconndata_;
  friend struct ::protobuf_Qot_5fCommon_2eproto::TableStruct;
  friend void ::protobuf_Qot_5fCommon_2eproto::InitDefaultsConnSubInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Security

// required int32 market = 1;
inline bool Security::has_market() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Security::set_has_market() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Security::clear_has_market() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Security::clear_market() {
  market_ = 0;
  clear_has_market();
}
inline ::google::protobuf::int32 Security::market() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Security.market)
  return market_;
}
inline void Security::set_market(::google::protobuf::int32 value) {
  set_has_market();
  market_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Security.market)
}

// required string code = 2;
inline bool Security::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Security::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Security::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Security::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
inline const ::std::string& Security::code() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Security.code)
  return code_.GetNoArena();
}
inline void Security::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.Security.code)
}
#if LANG_CXX11
inline void Security::set_code(::std::string&& value) {
  set_has_code();
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.Security.code)
}
#endif
inline void Security::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.Security.code)
}
inline void Security::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.Security.code)
}
inline ::std::string* Security::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:Qot_Common.Security.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Security::release_code() {
  // @@protoc_insertion_point(field_release:Qot_Common.Security.code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Security::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.Security.code)
}

// -------------------------------------------------------------------

// KLine

// required string time = 1;
inline bool KLine::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KLine::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KLine::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KLine::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& KLine::time() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.time)
  return time_.GetNoArena();
}
inline void KLine::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.time)
}
#if LANG_CXX11
inline void KLine::set_time(::std::string&& value) {
  set_has_time();
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.KLine.time)
}
#endif
inline void KLine::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.KLine.time)
}
inline void KLine::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.KLine.time)
}
inline ::std::string* KLine::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:Qot_Common.KLine.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KLine::release_time() {
  // @@protoc_insertion_point(field_release:Qot_Common.KLine.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KLine::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.KLine.time)
}

// required bool isBlank = 2;
inline bool KLine::has_isblank() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void KLine::set_has_isblank() {
  _has_bits_[0] |= 0x00000800u;
}
inline void KLine::clear_has_isblank() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void KLine::clear_isblank() {
  isblank_ = false;
  clear_has_isblank();
}
inline bool KLine::isblank() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.isBlank)
  return isblank_;
}
inline void KLine::set_isblank(bool value) {
  set_has_isblank();
  isblank_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.isBlank)
}

// optional double highPrice = 3;
inline bool KLine::has_highprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KLine::set_has_highprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KLine::clear_has_highprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KLine::clear_highprice() {
  highprice_ = 0;
  clear_has_highprice();
}
inline double KLine::highprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.highPrice)
  return highprice_;
}
inline void KLine::set_highprice(double value) {
  set_has_highprice();
  highprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.highPrice)
}

// optional double openPrice = 4;
inline bool KLine::has_openprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KLine::set_has_openprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KLine::clear_has_openprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KLine::clear_openprice() {
  openprice_ = 0;
  clear_has_openprice();
}
inline double KLine::openprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.openPrice)
  return openprice_;
}
inline void KLine::set_openprice(double value) {
  set_has_openprice();
  openprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.openPrice)
}

// optional double lowPrice = 5;
inline bool KLine::has_lowprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KLine::set_has_lowprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KLine::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KLine::clear_lowprice() {
  lowprice_ = 0;
  clear_has_lowprice();
}
inline double KLine::lowprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.lowPrice)
  return lowprice_;
}
inline void KLine::set_lowprice(double value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.lowPrice)
}

// optional double closePrice = 6;
inline bool KLine::has_closeprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KLine::set_has_closeprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KLine::clear_has_closeprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KLine::clear_closeprice() {
  closeprice_ = 0;
  clear_has_closeprice();
}
inline double KLine::closeprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.closePrice)
  return closeprice_;
}
inline void KLine::set_closeprice(double value) {
  set_has_closeprice();
  closeprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.closePrice)
}

// optional double lastClosePrice = 7;
inline bool KLine::has_lastcloseprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KLine::set_has_lastcloseprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KLine::clear_has_lastcloseprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KLine::clear_lastcloseprice() {
  lastcloseprice_ = 0;
  clear_has_lastcloseprice();
}
inline double KLine::lastcloseprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.lastClosePrice)
  return lastcloseprice_;
}
inline void KLine::set_lastcloseprice(double value) {
  set_has_lastcloseprice();
  lastcloseprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.lastClosePrice)
}

// optional int64 volume = 8;
inline bool KLine::has_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KLine::set_has_volume() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KLine::clear_has_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KLine::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 KLine::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.volume)
  return volume_;
}
inline void KLine::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.volume)
}

// optional double turnover = 9;
inline bool KLine::has_turnover() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KLine::set_has_turnover() {
  _has_bits_[0] |= 0x00000080u;
}
inline void KLine::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void KLine::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double KLine::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.turnover)
  return turnover_;
}
inline void KLine::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.turnover)
}

// optional double turnoverRate = 10;
inline bool KLine::has_turnoverrate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KLine::set_has_turnoverrate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void KLine::clear_has_turnoverrate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void KLine::clear_turnoverrate() {
  turnoverrate_ = 0;
  clear_has_turnoverrate();
}
inline double KLine::turnoverrate() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.turnoverRate)
  return turnoverrate_;
}
inline void KLine::set_turnoverrate(double value) {
  set_has_turnoverrate();
  turnoverrate_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.turnoverRate)
}

// optional double pe = 11;
inline bool KLine::has_pe() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KLine::set_has_pe() {
  _has_bits_[0] |= 0x00000200u;
}
inline void KLine::clear_has_pe() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void KLine::clear_pe() {
  pe_ = 0;
  clear_has_pe();
}
inline double KLine::pe() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.pe)
  return pe_;
}
inline void KLine::set_pe(double value) {
  set_has_pe();
  pe_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.pe)
}

// optional double changeRate = 12;
inline bool KLine::has_changerate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void KLine::set_has_changerate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void KLine::clear_has_changerate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void KLine::clear_changerate() {
  changerate_ = 0;
  clear_has_changerate();
}
inline double KLine::changerate() const {
  // @@protoc_insertion_point(field_get:Qot_Common.KLine.changeRate)
  return changerate_;
}
inline void KLine::set_changerate(double value) {
  set_has_changerate();
  changerate_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.KLine.changeRate)
}

// -------------------------------------------------------------------

// BasicQot

// required .Qot_Common.Security security = 1;
inline bool BasicQot::has_security() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BasicQot::set_has_security() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BasicQot::clear_has_security() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BasicQot::clear_security() {
  if (security_ != NULL) security_->Clear();
  clear_has_security();
}
inline const ::Qot_Common::Security& BasicQot::security() const {
  const ::Qot_Common::Security* p = security_;
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.security)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* BasicQot::release_security() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.security)
  clear_has_security();
  ::Qot_Common::Security* temp = security_;
  security_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* BasicQot::mutable_security() {
  set_has_security();
  if (security_ == NULL) {
    security_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.security)
  return security_;
}
inline void BasicQot::set_allocated_security(::Qot_Common::Security* security) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete security_;
  }
  if (security) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      security = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    set_has_security();
  } else {
    clear_has_security();
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.security)
}

// required bool isSuspended = 2;
inline bool BasicQot::has_issuspended() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BasicQot::set_has_issuspended() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BasicQot::clear_has_issuspended() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BasicQot::clear_issuspended() {
  issuspended_ = false;
  clear_has_issuspended();
}
inline bool BasicQot::issuspended() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.isSuspended)
  return issuspended_;
}
inline void BasicQot::set_issuspended(bool value) {
  set_has_issuspended();
  issuspended_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.isSuspended)
}

// required string listTime = 3;
inline bool BasicQot::has_listtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasicQot::set_has_listtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BasicQot::clear_has_listtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BasicQot::clear_listtime() {
  listtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listtime();
}
inline const ::std::string& BasicQot::listtime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.listTime)
  return listtime_.GetNoArena();
}
inline void BasicQot::set_listtime(const ::std::string& value) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.listTime)
}
#if LANG_CXX11
inline void BasicQot::set_listtime(::std::string&& value) {
  set_has_listtime();
  listtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.BasicQot.listTime)
}
#endif
inline void BasicQot::set_listtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.BasicQot.listTime)
}
inline void BasicQot::set_listtime(const char* value, size_t size) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.BasicQot.listTime)
}
inline ::std::string* BasicQot::mutable_listtime() {
  set_has_listtime();
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.listTime)
  return listtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasicQot::release_listtime() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.listTime)
  clear_has_listtime();
  return listtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicQot::set_allocated_listtime(::std::string* listtime) {
  if (listtime != NULL) {
    set_has_listtime();
  } else {
    clear_has_listtime();
  }
  listtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listtime);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.listTime)
}

// required double priceSpread = 4;
inline bool BasicQot::has_pricespread() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BasicQot::set_has_pricespread() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BasicQot::clear_has_pricespread() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BasicQot::clear_pricespread() {
  pricespread_ = 0;
  clear_has_pricespread();
}
inline double BasicQot::pricespread() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.priceSpread)
  return pricespread_;
}
inline void BasicQot::set_pricespread(double value) {
  set_has_pricespread();
  pricespread_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.priceSpread)
}

// required string updateTime = 5;
inline bool BasicQot::has_updatetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasicQot::set_has_updatetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BasicQot::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BasicQot::clear_updatetime() {
  updatetime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_updatetime();
}
inline const ::std::string& BasicQot::updatetime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.updateTime)
  return updatetime_.GetNoArena();
}
inline void BasicQot::set_updatetime(const ::std::string& value) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.updateTime)
}
#if LANG_CXX11
inline void BasicQot::set_updatetime(::std::string&& value) {
  set_has_updatetime();
  updatetime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.BasicQot.updateTime)
}
#endif
inline void BasicQot::set_updatetime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.BasicQot.updateTime)
}
inline void BasicQot::set_updatetime(const char* value, size_t size) {
  set_has_updatetime();
  updatetime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.BasicQot.updateTime)
}
inline ::std::string* BasicQot::mutable_updatetime() {
  set_has_updatetime();
  // @@protoc_insertion_point(field_mutable:Qot_Common.BasicQot.updateTime)
  return updatetime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BasicQot::release_updatetime() {
  // @@protoc_insertion_point(field_release:Qot_Common.BasicQot.updateTime)
  clear_has_updatetime();
  return updatetime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BasicQot::set_allocated_updatetime(::std::string* updatetime) {
  if (updatetime != NULL) {
    set_has_updatetime();
  } else {
    clear_has_updatetime();
  }
  updatetime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatetime);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.BasicQot.updateTime)
}

// required double highPrice = 6;
inline bool BasicQot::has_highprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BasicQot::set_has_highprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BasicQot::clear_has_highprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BasicQot::clear_highprice() {
  highprice_ = 0;
  clear_has_highprice();
}
inline double BasicQot::highprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.highPrice)
  return highprice_;
}
inline void BasicQot::set_highprice(double value) {
  set_has_highprice();
  highprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.highPrice)
}

// required double openPrice = 7;
inline bool BasicQot::has_openprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BasicQot::set_has_openprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BasicQot::clear_has_openprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BasicQot::clear_openprice() {
  openprice_ = 0;
  clear_has_openprice();
}
inline double BasicQot::openprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.openPrice)
  return openprice_;
}
inline void BasicQot::set_openprice(double value) {
  set_has_openprice();
  openprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.openPrice)
}

// required double lowPrice = 8;
inline bool BasicQot::has_lowprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BasicQot::set_has_lowprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BasicQot::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BasicQot::clear_lowprice() {
  lowprice_ = 0;
  clear_has_lowprice();
}
inline double BasicQot::lowprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.lowPrice)
  return lowprice_;
}
inline void BasicQot::set_lowprice(double value) {
  set_has_lowprice();
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.lowPrice)
}

// required double curPrice = 9;
inline bool BasicQot::has_curprice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BasicQot::set_has_curprice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BasicQot::clear_has_curprice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BasicQot::clear_curprice() {
  curprice_ = 0;
  clear_has_curprice();
}
inline double BasicQot::curprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.curPrice)
  return curprice_;
}
inline void BasicQot::set_curprice(double value) {
  set_has_curprice();
  curprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.curPrice)
}

// required double lastClosePrice = 10;
inline bool BasicQot::has_lastcloseprice() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BasicQot::set_has_lastcloseprice() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BasicQot::clear_has_lastcloseprice() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BasicQot::clear_lastcloseprice() {
  lastcloseprice_ = 0;
  clear_has_lastcloseprice();
}
inline double BasicQot::lastcloseprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.lastClosePrice)
  return lastcloseprice_;
}
inline void BasicQot::set_lastcloseprice(double value) {
  set_has_lastcloseprice();
  lastcloseprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.lastClosePrice)
}

// required int64 volume = 11;
inline bool BasicQot::has_volume() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BasicQot::set_has_volume() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BasicQot::clear_has_volume() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BasicQot::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 BasicQot::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.volume)
  return volume_;
}
inline void BasicQot::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.volume)
}

// required double turnover = 12;
inline bool BasicQot::has_turnover() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BasicQot::set_has_turnover() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BasicQot::clear_has_turnover() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BasicQot::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double BasicQot::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.turnover)
  return turnover_;
}
inline void BasicQot::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.turnover)
}

// required double turnoverRate = 13;
inline bool BasicQot::has_turnoverrate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BasicQot::set_has_turnoverrate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BasicQot::clear_has_turnoverrate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BasicQot::clear_turnoverrate() {
  turnoverrate_ = 0;
  clear_has_turnoverrate();
}
inline double BasicQot::turnoverrate() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.turnoverRate)
  return turnoverrate_;
}
inline void BasicQot::set_turnoverrate(double value) {
  set_has_turnoverrate();
  turnoverrate_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.turnoverRate)
}

// required double amplitude = 14;
inline bool BasicQot::has_amplitude() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BasicQot::set_has_amplitude() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BasicQot::clear_has_amplitude() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BasicQot::clear_amplitude() {
  amplitude_ = 0;
  clear_has_amplitude();
}
inline double BasicQot::amplitude() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.amplitude)
  return amplitude_;
}
inline void BasicQot::set_amplitude(double value) {
  set_has_amplitude();
  amplitude_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.amplitude)
}

// optional int32 darkStatus = 15;
inline bool BasicQot::has_darkstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BasicQot::set_has_darkstatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BasicQot::clear_has_darkstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BasicQot::clear_darkstatus() {
  darkstatus_ = 0;
  clear_has_darkstatus();
}
inline ::google::protobuf::int32 BasicQot::darkstatus() const {
  // @@protoc_insertion_point(field_get:Qot_Common.BasicQot.darkStatus)
  return darkstatus_;
}
inline void BasicQot::set_darkstatus(::google::protobuf::int32 value) {
  set_has_darkstatus();
  darkstatus_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.BasicQot.darkStatus)
}

// -------------------------------------------------------------------

// TimeShare

// required string time = 1;
inline bool TimeShare::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeShare::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeShare::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeShare::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& TimeShare::time() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.time)
  return time_.GetNoArena();
}
inline void TimeShare::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.time)
}
#if LANG_CXX11
inline void TimeShare::set_time(::std::string&& value) {
  set_has_time();
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.TimeShare.time)
}
#endif
inline void TimeShare::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.TimeShare.time)
}
inline void TimeShare::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.TimeShare.time)
}
inline ::std::string* TimeShare::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:Qot_Common.TimeShare.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TimeShare::release_time() {
  // @@protoc_insertion_point(field_release:Qot_Common.TimeShare.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TimeShare::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.TimeShare.time)
}

// required int32 minute = 2;
inline bool TimeShare::has_minute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeShare::set_has_minute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeShare::clear_has_minute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeShare::clear_minute() {
  minute_ = 0;
  clear_has_minute();
}
inline ::google::protobuf::int32 TimeShare::minute() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.minute)
  return minute_;
}
inline void TimeShare::set_minute(::google::protobuf::int32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.minute)
}

// required bool isBlank = 3;
inline bool TimeShare::has_isblank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeShare::set_has_isblank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeShare::clear_has_isblank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeShare::clear_isblank() {
  isblank_ = false;
  clear_has_isblank();
}
inline bool TimeShare::isblank() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.isBlank)
  return isblank_;
}
inline void TimeShare::set_isblank(bool value) {
  set_has_isblank();
  isblank_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.isBlank)
}

// optional double price = 4;
inline bool TimeShare::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimeShare::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimeShare::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimeShare::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double TimeShare::price() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.price)
  return price_;
}
inline void TimeShare::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.price)
}

// optional double lastClosePrice = 5;
inline bool TimeShare::has_lastcloseprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TimeShare::set_has_lastcloseprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TimeShare::clear_has_lastcloseprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TimeShare::clear_lastcloseprice() {
  lastcloseprice_ = 0;
  clear_has_lastcloseprice();
}
inline double TimeShare::lastcloseprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.lastClosePrice)
  return lastcloseprice_;
}
inline void TimeShare::set_lastcloseprice(double value) {
  set_has_lastcloseprice();
  lastcloseprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.lastClosePrice)
}

// optional double avgPrice = 6;
inline bool TimeShare::has_avgprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TimeShare::set_has_avgprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TimeShare::clear_has_avgprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TimeShare::clear_avgprice() {
  avgprice_ = 0;
  clear_has_avgprice();
}
inline double TimeShare::avgprice() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.avgPrice)
  return avgprice_;
}
inline void TimeShare::set_avgprice(double value) {
  set_has_avgprice();
  avgprice_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.avgPrice)
}

// optional int64 volume = 7;
inline bool TimeShare::has_volume() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TimeShare::set_has_volume() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TimeShare::clear_has_volume() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TimeShare::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 TimeShare::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.volume)
  return volume_;
}
inline void TimeShare::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.volume)
}

// optional double turnover = 8;
inline bool TimeShare::has_turnover() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TimeShare::set_has_turnover() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TimeShare::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TimeShare::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double TimeShare::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_Common.TimeShare.turnover)
  return turnover_;
}
inline void TimeShare::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.TimeShare.turnover)
}

// -------------------------------------------------------------------

// SecurityStaticBasic

// required .Qot_Common.Security security = 1;
inline bool SecurityStaticBasic::has_security() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecurityStaticBasic::set_has_security() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SecurityStaticBasic::clear_has_security() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SecurityStaticBasic::clear_security() {
  if (security_ != NULL) security_->Clear();
  clear_has_security();
}
inline const ::Qot_Common::Security& SecurityStaticBasic::security() const {
  const ::Qot_Common::Security* p = security_;
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.security)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* SecurityStaticBasic::release_security() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticBasic.security)
  clear_has_security();
  ::Qot_Common::Security* temp = security_;
  security_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* SecurityStaticBasic::mutable_security() {
  set_has_security();
  if (security_ == NULL) {
    security_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticBasic.security)
  return security_;
}
inline void SecurityStaticBasic::set_allocated_security(::Qot_Common::Security* security) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete security_;
  }
  if (security) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      security = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, security, submessage_arena);
    }
    set_has_security();
  } else {
    clear_has_security();
  }
  security_ = security;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticBasic.security)
}

// required int64 id = 2;
inline bool SecurityStaticBasic::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SecurityStaticBasic::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SecurityStaticBasic::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SecurityStaticBasic::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 SecurityStaticBasic::id() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.id)
  return id_;
}
inline void SecurityStaticBasic::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.id)
}

// required int32 lotSize = 3;
inline bool SecurityStaticBasic::has_lotsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SecurityStaticBasic::set_has_lotsize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SecurityStaticBasic::clear_has_lotsize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SecurityStaticBasic::clear_lotsize() {
  lotsize_ = 0;
  clear_has_lotsize();
}
inline ::google::protobuf::int32 SecurityStaticBasic::lotsize() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.lotSize)
  return lotsize_;
}
inline void SecurityStaticBasic::set_lotsize(::google::protobuf::int32 value) {
  set_has_lotsize();
  lotsize_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.lotSize)
}

// required int32 secType = 4;
inline bool SecurityStaticBasic::has_sectype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SecurityStaticBasic::set_has_sectype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SecurityStaticBasic::clear_has_sectype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SecurityStaticBasic::clear_sectype() {
  sectype_ = 0;
  clear_has_sectype();
}
inline ::google::protobuf::int32 SecurityStaticBasic::sectype() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.secType)
  return sectype_;
}
inline void SecurityStaticBasic::set_sectype(::google::protobuf::int32 value) {
  set_has_sectype();
  sectype_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.secType)
}

// required string name = 5;
inline bool SecurityStaticBasic::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityStaticBasic::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityStaticBasic::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityStaticBasic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SecurityStaticBasic::name() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.name)
  return name_.GetNoArena();
}
inline void SecurityStaticBasic::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.name)
}
#if LANG_CXX11
inline void SecurityStaticBasic::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.SecurityStaticBasic.name)
}
#endif
inline void SecurityStaticBasic::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.SecurityStaticBasic.name)
}
inline void SecurityStaticBasic::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.SecurityStaticBasic.name)
}
inline ::std::string* SecurityStaticBasic::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticBasic.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityStaticBasic::release_name() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticBasic.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityStaticBasic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticBasic.name)
}

// required string listTime = 6;
inline bool SecurityStaticBasic::has_listtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityStaticBasic::set_has_listtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityStaticBasic::clear_has_listtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityStaticBasic::clear_listtime() {
  listtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_listtime();
}
inline const ::std::string& SecurityStaticBasic::listtime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticBasic.listTime)
  return listtime_.GetNoArena();
}
inline void SecurityStaticBasic::set_listtime(const ::std::string& value) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.SecurityStaticBasic.listTime)
}
#if LANG_CXX11
inline void SecurityStaticBasic::set_listtime(::std::string&& value) {
  set_has_listtime();
  listtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.SecurityStaticBasic.listTime)
}
#endif
inline void SecurityStaticBasic::set_listtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.SecurityStaticBasic.listTime)
}
inline void SecurityStaticBasic::set_listtime(const char* value, size_t size) {
  set_has_listtime();
  listtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.SecurityStaticBasic.listTime)
}
inline ::std::string* SecurityStaticBasic::mutable_listtime() {
  set_has_listtime();
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticBasic.listTime)
  return listtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SecurityStaticBasic::release_listtime() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticBasic.listTime)
  clear_has_listtime();
  return listtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SecurityStaticBasic::set_allocated_listtime(::std::string* listtime) {
  if (listtime != NULL) {
    set_has_listtime();
  } else {
    clear_has_listtime();
  }
  listtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), listtime);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticBasic.listTime)
}

// -------------------------------------------------------------------

// WarrantStaticExData

// required int32 type = 1;
inline bool WarrantStaticExData::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WarrantStaticExData::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WarrantStaticExData::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WarrantStaticExData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 WarrantStaticExData::type() const {
  // @@protoc_insertion_point(field_get:Qot_Common.WarrantStaticExData.type)
  return type_;
}
inline void WarrantStaticExData::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.WarrantStaticExData.type)
}

// required .Qot_Common.Security owner = 2;
inline bool WarrantStaticExData::has_owner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WarrantStaticExData::set_has_owner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WarrantStaticExData::clear_has_owner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WarrantStaticExData::clear_owner() {
  if (owner_ != NULL) owner_->Clear();
  clear_has_owner();
}
inline const ::Qot_Common::Security& WarrantStaticExData::owner() const {
  const ::Qot_Common::Security* p = owner_;
  // @@protoc_insertion_point(field_get:Qot_Common.WarrantStaticExData.owner)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::Security*>(
      &::Qot_Common::_Security_default_instance_);
}
inline ::Qot_Common::Security* WarrantStaticExData::release_owner() {
  // @@protoc_insertion_point(field_release:Qot_Common.WarrantStaticExData.owner)
  clear_has_owner();
  ::Qot_Common::Security* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline ::Qot_Common::Security* WarrantStaticExData::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) {
    owner_ = new ::Qot_Common::Security;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.WarrantStaticExData.owner)
  return owner_;
}
inline void WarrantStaticExData::set_allocated_owner(::Qot_Common::Security* owner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete owner_;
  }
  if (owner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      owner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    set_has_owner();
  } else {
    clear_has_owner();
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.WarrantStaticExData.owner)
}

// -------------------------------------------------------------------

// SecurityStaticInfo

// required .Qot_Common.SecurityStaticBasic basic = 1;
inline bool SecurityStaticInfo::has_basic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecurityStaticInfo::set_has_basic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SecurityStaticInfo::clear_has_basic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SecurityStaticInfo::clear_basic() {
  if (basic_ != NULL) basic_->Clear();
  clear_has_basic();
}
inline const ::Qot_Common::SecurityStaticBasic& SecurityStaticInfo::basic() const {
  const ::Qot_Common::SecurityStaticBasic* p = basic_;
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticInfo.basic)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::SecurityStaticBasic*>(
      &::Qot_Common::_SecurityStaticBasic_default_instance_);
}
inline ::Qot_Common::SecurityStaticBasic* SecurityStaticInfo::release_basic() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticInfo.basic)
  clear_has_basic();
  ::Qot_Common::SecurityStaticBasic* temp = basic_;
  basic_ = NULL;
  return temp;
}
inline ::Qot_Common::SecurityStaticBasic* SecurityStaticInfo::mutable_basic() {
  set_has_basic();
  if (basic_ == NULL) {
    basic_ = new ::Qot_Common::SecurityStaticBasic;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticInfo.basic)
  return basic_;
}
inline void SecurityStaticInfo::set_allocated_basic(::Qot_Common::SecurityStaticBasic* basic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete basic_;
  }
  if (basic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      basic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    set_has_basic();
  } else {
    clear_has_basic();
  }
  basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticInfo.basic)
}

// optional .Qot_Common.WarrantStaticExData warrantExData = 2;
inline bool SecurityStaticInfo::has_warrantexdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SecurityStaticInfo::set_has_warrantexdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SecurityStaticInfo::clear_has_warrantexdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SecurityStaticInfo::clear_warrantexdata() {
  if (warrantexdata_ != NULL) warrantexdata_->Clear();
  clear_has_warrantexdata();
}
inline const ::Qot_Common::WarrantStaticExData& SecurityStaticInfo::warrantexdata() const {
  const ::Qot_Common::WarrantStaticExData* p = warrantexdata_;
  // @@protoc_insertion_point(field_get:Qot_Common.SecurityStaticInfo.warrantExData)
  return p != NULL ? *p : *reinterpret_cast<const ::Qot_Common::WarrantStaticExData*>(
      &::Qot_Common::_WarrantStaticExData_default_instance_);
}
inline ::Qot_Common::WarrantStaticExData* SecurityStaticInfo::release_warrantexdata() {
  // @@protoc_insertion_point(field_release:Qot_Common.SecurityStaticInfo.warrantExData)
  clear_has_warrantexdata();
  ::Qot_Common::WarrantStaticExData* temp = warrantexdata_;
  warrantexdata_ = NULL;
  return temp;
}
inline ::Qot_Common::WarrantStaticExData* SecurityStaticInfo::mutable_warrantexdata() {
  set_has_warrantexdata();
  if (warrantexdata_ == NULL) {
    warrantexdata_ = new ::Qot_Common::WarrantStaticExData;
  }
  // @@protoc_insertion_point(field_mutable:Qot_Common.SecurityStaticInfo.warrantExData)
  return warrantexdata_;
}
inline void SecurityStaticInfo::set_allocated_warrantexdata(::Qot_Common::WarrantStaticExData* warrantexdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete warrantexdata_;
  }
  if (warrantexdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      warrantexdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, warrantexdata, submessage_arena);
    }
    set_has_warrantexdata();
  } else {
    clear_has_warrantexdata();
  }
  warrantexdata_ = warrantexdata;
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.SecurityStaticInfo.warrantExData)
}

// -------------------------------------------------------------------

// Broker

// required int64 id = 1;
inline bool Broker::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Broker::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Broker::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Broker::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Broker::id() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Broker.id)
  return id_;
}
inline void Broker::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Broker.id)
}

// required string name = 2;
inline bool Broker::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Broker::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Broker::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Broker::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Broker::name() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Broker.name)
  return name_.GetNoArena();
}
inline void Broker::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.Broker.name)
}
#if LANG_CXX11
inline void Broker::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.Broker.name)
}
#endif
inline void Broker::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.Broker.name)
}
inline void Broker::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.Broker.name)
}
inline ::std::string* Broker::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Qot_Common.Broker.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Broker::release_name() {
  // @@protoc_insertion_point(field_release:Qot_Common.Broker.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Broker::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.Broker.name)
}

// required int32 pos = 3;
inline bool Broker::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Broker::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Broker::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Broker::clear_pos() {
  pos_ = 0;
  clear_has_pos();
}
inline ::google::protobuf::int32 Broker::pos() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Broker.pos)
  return pos_;
}
inline void Broker::set_pos(::google::protobuf::int32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Broker.pos)
}

// -------------------------------------------------------------------

// Ticker

// required string time = 1;
inline bool Ticker::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ticker::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ticker::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ticker::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}
inline const ::std::string& Ticker::time() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.time)
  return time_.GetNoArena();
}
inline void Ticker::set_time(const ::std::string& value) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.time)
}
#if LANG_CXX11
inline void Ticker::set_time(::std::string&& value) {
  set_has_time();
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Qot_Common.Ticker.time)
}
#endif
inline void Ticker::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Qot_Common.Ticker.time)
}
inline void Ticker::set_time(const char* value, size_t size) {
  set_has_time();
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Qot_Common.Ticker.time)
}
inline ::std::string* Ticker::mutable_time() {
  set_has_time();
  // @@protoc_insertion_point(field_mutable:Qot_Common.Ticker.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ticker::release_time() {
  // @@protoc_insertion_point(field_release:Qot_Common.Ticker.time)
  clear_has_time();
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ticker::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    set_has_time();
  } else {
    clear_has_time();
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Qot_Common.Ticker.time)
}

// required int64 sequence = 2;
inline bool Ticker::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ticker::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ticker::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ticker::clear_sequence() {
  sequence_ = GOOGLE_LONGLONG(0);
  clear_has_sequence();
}
inline ::google::protobuf::int64 Ticker::sequence() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.sequence)
  return sequence_;
}
inline void Ticker::set_sequence(::google::protobuf::int64 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.sequence)
}

// required int32 dir = 3;
inline bool Ticker::has_dir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ticker::set_has_dir() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ticker::clear_has_dir() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ticker::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
inline ::google::protobuf::int32 Ticker::dir() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.dir)
  return dir_;
}
inline void Ticker::set_dir(::google::protobuf::int32 value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.dir)
}

// required double price = 4;
inline bool Ticker::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ticker::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ticker::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ticker::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double Ticker::price() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.price)
  return price_;
}
inline void Ticker::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.price)
}

// required int64 volume = 5;
inline bool Ticker::has_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ticker::set_has_volume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ticker::clear_has_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ticker::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 Ticker::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.volume)
  return volume_;
}
inline void Ticker::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.volume)
}

// required double turnover = 6;
inline bool Ticker::has_turnover() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ticker::set_has_turnover() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ticker::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ticker::clear_turnover() {
  turnover_ = 0;
  clear_has_turnover();
}
inline double Ticker::turnover() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.turnover)
  return turnover_;
}
inline void Ticker::set_turnover(double value) {
  set_has_turnover();
  turnover_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.turnover)
}

// optional double recvTime = 7;
inline bool Ticker::has_recvtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ticker::set_has_recvtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ticker::clear_has_recvtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ticker::clear_recvtime() {
  recvtime_ = 0;
  clear_has_recvtime();
}
inline double Ticker::recvtime() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.recvTime)
  return recvtime_;
}
inline void Ticker::set_recvtime(double value) {
  set_has_recvtime();
  recvtime_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.recvTime)
}

// optional int32 type = 8;
inline bool Ticker::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ticker::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ticker::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ticker::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Ticker::type() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.type)
  return type_;
}
inline void Ticker::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.type)
}

// optional int32 typeSign = 9;
inline bool Ticker::has_typesign() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ticker::set_has_typesign() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ticker::clear_has_typesign() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ticker::clear_typesign() {
  typesign_ = 0;
  clear_has_typesign();
}
inline ::google::protobuf::int32 Ticker::typesign() const {
  // @@protoc_insertion_point(field_get:Qot_Common.Ticker.typeSign)
  return typesign_;
}
inline void Ticker::set_typesign(::google::protobuf::int32 value) {
  set_has_typesign();
  typesign_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.Ticker.typeSign)
}

// -------------------------------------------------------------------

// OrderBook

// required double price = 1;
inline bool OrderBook::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderBook::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderBook::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderBook::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double OrderBook::price() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OrderBook.price)
  return price_;
}
inline void OrderBook::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OrderBook.price)
}

// required int64 volume = 2;
inline bool OrderBook::has_volume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderBook::set_has_volume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderBook::clear_has_volume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderBook::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 OrderBook::volume() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OrderBook.volume)
  return volume_;
}
inline void OrderBook::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OrderBook.volume)
}

// required int32 orederCount = 3;
inline bool OrderBook::has_oredercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderBook::set_has_oredercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderBook::clear_has_oredercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderBook::clear_oredercount() {
  oredercount_ = 0;
  clear_has_oredercount();
}
inline ::google::protobuf::int32 OrderBook::oredercount() const {
  // @@protoc_insertion_point(field_get:Qot_Common.OrderBook.orederCount)
  return oredercount_;
}
inline void OrderBook::set_oredercount(::google::protobuf::int32 value) {
  set_has_oredercount();
  oredercount_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.OrderBook.orederCount)
}

// -------------------------------------------------------------------

// SubInfo

// required int32 subType = 1;
inline bool SubInfo::has_subtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubInfo::set_has_subtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubInfo::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubInfo::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 SubInfo::subtype() const {
  // @@protoc_insertion_point(field_get:Qot_Common.SubInfo.subType)
  return subtype_;
}
inline void SubInfo::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.SubInfo.subType)
}

// repeated .Qot_Common.Security securityList = 2;
inline int SubInfo::securitylist_size() const {
  return securitylist_.size();
}
inline void SubInfo::clear_securitylist() {
  securitylist_.Clear();
}
inline const ::Qot_Common::Security& SubInfo::securitylist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_Common.SubInfo.securityList)
  return securitylist_.Get(index);
}
inline ::Qot_Common::Security* SubInfo::mutable_securitylist(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_Common.SubInfo.securityList)
  return securitylist_.Mutable(index);
}
inline ::Qot_Common::Security* SubInfo::add_securitylist() {
  // @@protoc_insertion_point(field_add:Qot_Common.SubInfo.securityList)
  return securitylist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >*
SubInfo::mutable_securitylist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_Common.SubInfo.securityList)
  return &securitylist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_Common::Security >&
SubInfo::securitylist() const {
  // @@protoc_insertion_point(field_list:Qot_Common.SubInfo.securityList)
  return securitylist_;
}

// -------------------------------------------------------------------

// ConnSubInfo

// repeated .Qot_Common.SubInfo subInfoList = 1;
inline int ConnSubInfo::subinfolist_size() const {
  return subinfolist_.size();
}
inline void ConnSubInfo::clear_subinfolist() {
  subinfolist_.Clear();
}
inline const ::Qot_Common::SubInfo& ConnSubInfo::subinfolist(int index) const {
  // @@protoc_insertion_point(field_get:Qot_Common.ConnSubInfo.subInfoList)
  return subinfolist_.Get(index);
}
inline ::Qot_Common::SubInfo* ConnSubInfo::mutable_subinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:Qot_Common.ConnSubInfo.subInfoList)
  return subinfolist_.Mutable(index);
}
inline ::Qot_Common::SubInfo* ConnSubInfo::add_subinfolist() {
  // @@protoc_insertion_point(field_add:Qot_Common.ConnSubInfo.subInfoList)
  return subinfolist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo >*
ConnSubInfo::mutable_subinfolist() {
  // @@protoc_insertion_point(field_mutable_list:Qot_Common.ConnSubInfo.subInfoList)
  return &subinfolist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Qot_Common::SubInfo >&
ConnSubInfo::subinfolist() const {
  // @@protoc_insertion_point(field_list:Qot_Common.ConnSubInfo.subInfoList)
  return subinfolist_;
}

// required int32 usedQuota = 2;
inline bool ConnSubInfo::has_usedquota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnSubInfo::set_has_usedquota() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnSubInfo::clear_has_usedquota() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnSubInfo::clear_usedquota() {
  usedquota_ = 0;
  clear_has_usedquota();
}
inline ::google::protobuf::int32 ConnSubInfo::usedquota() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ConnSubInfo.usedQuota)
  return usedquota_;
}
inline void ConnSubInfo::set_usedquota(::google::protobuf::int32 value) {
  set_has_usedquota();
  usedquota_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.ConnSubInfo.usedQuota)
}

// required bool isOwnConnData = 3;
inline bool ConnSubInfo::has_isownconndata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnSubInfo::set_has_isownconndata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnSubInfo::clear_has_isownconndata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnSubInfo::clear_isownconndata() {
  isownconndata_ = false;
  clear_has_isownconndata();
}
inline bool ConnSubInfo::isownconndata() const {
  // @@protoc_insertion_point(field_get:Qot_Common.ConnSubInfo.isOwnConnData)
  return isownconndata_;
}
inline void ConnSubInfo::set_isownconndata(bool value) {
  set_has_isownconndata();
  isownconndata_ = value;
  // @@protoc_insertion_point(field_set:Qot_Common.ConnSubInfo.isOwnConnData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Qot_Common

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Qot_Common::QotMarket> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::QotMarket>() {
  return ::Qot_Common::QotMarket_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::SecurityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::SecurityType>() {
  return ::Qot_Common::SecurityType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::PlateSetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::PlateSetType>() {
  return ::Qot_Common::PlateSetType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::WarrantType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::WarrantType>() {
  return ::Qot_Common::WarrantType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::QotMarketState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::QotMarketState>() {
  return ::Qot_Common::QotMarketState_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::RehabType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::RehabType>() {
  return ::Qot_Common::RehabType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::KLType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::KLType>() {
  return ::Qot_Common::KLType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::KLFields> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::KLFields>() {
  return ::Qot_Common::KLFields_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::SubType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::SubType>() {
  return ::Qot_Common::SubType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::TickerDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::TickerDirection>() {
  return ::Qot_Common::TickerDirection_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::TickerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::TickerType>() {
  return ::Qot_Common::TickerType_descriptor();
}
template <> struct is_proto_enum< ::Qot_Common::DarkStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Qot_Common::DarkStatus>() {
  return ::Qot_Common::DarkStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Qot_5fCommon_2eproto__INCLUDED
